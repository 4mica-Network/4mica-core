name: CI/CD

on:
  push:
    branches:
      - "**"
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      pg:
        image: postgres:17-alpine
        env:
          POSTGRES_PASSWORD: qwerty123456
          POSTGRES_DB: core
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: foundry-toolchain
        uses: foundry-rs/foundry-toolchain@v1.4.0

      - name: Start anvil (Prague)
        run: |
          nohup anvil --hardfork prague --host 0.0.0.0 > anvil.log 2>&1 &
          sleep 60
          cat anvil.log

      - name: Run Solidity tests
        working-directory: contracts
        run: forge test -vvvv

      - name: Deploy smart contract
        env:
          DEPLOYER_PRIVATE_KEY: ${{ secrets.DEPLOYER_PRIVATE_KEY }}
          VK_X0: ${{ secrets.VK_X0 }}
          VK_X1: ${{ secrets.VK_X1 }}
          VK_Y0: ${{ secrets.VK_Y0 }}
          VK_Y1: ${{ secrets.VK_Y1 }}
          GUARANTEE_SIGNING_KEY: "${{ secrets.VK_X0 }} ${{ secrets.VK_X1 }} ${{ secrets.VK_Y0 }} ${{ secrets.VK_Y1 }}"
        working-directory: contracts
        run: |
          forge script script/Core4Mica.s.sol:Core4MicaScript \
            --rpc-url http://127.0.0.1:8545 \
            --broadcast \
            --via-ir \
            -vvvv

      - name: Build workspace
        run: cargo build --release --workspace

      - name: Initializing Postgres
        run: |
          for i in {1..30}; do
            if pg_isready -h localhost -U postgres; then
              echo "Postgres is ready!"
              break
            fi
            echo "Waiting for Postgres..."
            sleep 2
          done

      - name: Run tests
        env:
          DATABASE_URL: postgres://postgres:qwerty123456@localhost:5432/core
          BLS_PRIVATE_KEY: ${{ secrets.CI_BLS_PRIVATE_KEY }}
          ETHEREUM_HTTP_RPC_URL: http://127.0.0.1:8545
          ETHEREUM_WS_RPC_URL: ws://127.0.0.1:8545
          ETHEREUM_CONTRACT_ADDRESS: "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"
        run: cargo test --workspace

  deploy-develop:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.STAGING_SSH_KEY }}

      - name: Deploy to staging server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_SERVER }} << 'EOF'
          cd /home/deploy/4mica-core || git clone --recurse-submodules git@github.com:4mica-Network/4mica-core.git /home/deploy/4mica-core
          cd /home/deploy/4mica-core
          git fetch origin develop
          git reset --hard origin/develop
          git submodule update --init --recursive
          cargo build --release --workspace
          systemctl --user restart 4mica
          EOF

  deploy-main:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.PROD_SSH_KEY }}

      - name: Deploy to production server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PROD_USER }}@${{ secrets.PROD_SERVER }} << 'EOF'
          cd /home/deploy/4mica-core || git clone --recurse-submodules git@github.com:4mica-Network/4mica-core.git /home/deploy/4mica-core
          cd /home/deploy/4mica-core
          git fetch origin main
          git reset --hard origin/main
          git submodule update --init --recursive
          cargo build --release --workspace
          systemctl --user restart 4mica
          EOF
