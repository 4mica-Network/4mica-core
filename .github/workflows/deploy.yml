name: CI/CD

on:
  push:
    branches:
      - "**"
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      pg: # PostgreSQL service
        image: postgres:17-alpine
        env:
          POSTGRES_PASSWORD: qwerty123456
          POSTGRES_DB: core
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # ---- Install Foundry (forge + anvil)
      - name: Install Foundry
        run: |
          curl -L https://foundry.paradigm.xyz | bash
          export PATH="$HOME/.foundry/bin:$PATH"
          ~/.foundry/bin/foundryup

      # ---- Launch anvil with Prague hard fork in background
      - name: Start anvil (Prague)
        run: |
          nohup anvil --hardfork prague --host 0.0.0.0 > anvil.log 2>&1 &
          sleep 5

      # ---- Deploy the smart contract
      - name: Deploy smart contract
        run: |
          forge script script/Core4Mica.s.sol:Core4MicaScript \
            --rpc-url http://0.0.0.0:8545 \
            --broadcast \
            --via-ir \
            -vvvv

      # ---- Build and test Rust project
      - name: Build workspace
        run: cargo build --release --workspace

      - name: Run tests
        env:
          DATABASE_URL: postgres://postgres:qwerty123456@localhost:5432/core
        run: cargo test --workspace

  deploy-develop:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.STAGING_SSH_KEY }}

      - name: Deploy to staging server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_SERVER }} << 'EOF'
          cd /home/deploy/4mica-core || git clone git@github.com:4mica-Network/4mica-core.git /home/deploy/4mica-core
          cd /home/deploy/4mica-core
          git fetch origin develop
          git reset --hard origin/develop
          cargo build --release --workspace
          systemctl --user restart 4mica
          EOF

  deploy-main:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.PROD_SSH_KEY }}

      - name: Deploy to production server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PROD_USER }}@${{ secrets.PROD_SERVER }} << 'EOF'
          cd /home/deploy/4mica-core || git clone git@github.com:4mica-Network/4mica-core.git /home/deploy/4mica-core
          cd /home/deploy/4mica-core
          git fetch origin main
          git reset --hard origin/main
          cargo build --release --workspace
          systemctl --user restart 4mica
          EOF
