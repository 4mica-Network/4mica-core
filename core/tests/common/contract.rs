use alloy::sol;

sol! {
    #[sol(rpc, bytecode="6080604052670de0b6b3a7640000600155348015601a575f5ffd5b505f80546001600160a01b031916331790556109f6806100395f395ff3fe608060405260043610610084575f3560e01c806378f146a81161005757806378f146a8146100f8578063839bd5b4146101005780638da5cb5b1461013e578063a87430ba14610174578063eb820312146101c3575f5ffd5b80634d3820eb14610088578063645006ca146100925780636ce6849a146100ba5780637424c972146100d9575b5f5ffd5b6100906101fb565b005b34801561009d575f5ffd5b506100a760015481565b6040519081526020015b60405180910390f35b3480156100c5575f5ffd5b506100906100d43660046107ef565b6102fa565b3480156100e4575f5ffd5b506100906100f3366004610842565b6105d1565b6100906106e1565b34801561010b575f5ffd5b5061012e61011a36600461090d565b60046020525f908152604090205460ff1681565b60405190151581526020016100b1565b348015610149575f5ffd5b505f5461015c906001600160a01b031681565b6040516001600160a01b0390911681526020016100b1565b34801561017f575f5ffd5b506101ac61018e366004610924565b60026020525f90815260409020805460019091015460ff9091169082565b6040805192151583526020830191909152016100b1565b3480156101ce575f5ffd5b506101ac6101dd366004610924565b60036020525f90815260409020805460019091015460ff9091169082565b6001543410156102485760405162461bcd60e51b8152602060048201526013602482015272496e73756666696369656e742066756e64732160681b60448201526064015b60405180910390fd5b335f9081526002602052604090205460ff161561029e5760405162461bcd60e51b81526020600482015260146024820152735573657220616c7265616479206578697374732160601b604482015260640161023f565b335f81815260026020908152604091829020346001808301829055825460ff1916179091558251938452908301527fe29d35093005f4d575e1003753426b57a7f64378ba73332eef9c6ccc2b8decd691015b60405180910390a1565b335f9081526003602052604090205460ff166103285760405162461bcd60e51b815260040161023f90610944565b5f8281526004602052604090205460ff16156103865760405162461bcd60e51b815260206004820152601d60248201527f5472616e73616374696f6e20616c72656164792070726f636573736564000000604482015260640161023f565b6001600160a01b03831633146103ae5760405162461bcd60e51b815260040161023f90610944565b6001600160a01b0383165f9081526003602052604090205460ff166103e55760405162461bcd60e51b815260040161023f90610944565b6001600160a01b0384165f9081526002602052604090205460ff1661043e5760405162461bcd60e51b815260206004820152600f60248201526e55736572206e6f7420666f756e642160881b604482015260640161023f565b6001600160a01b0384165f908152600260205260409020600101548111156104a85760405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e7420636f6c6c61746572616c210000000000000000604482015260640161023f565b6001600160a01b0384165f90815260026020526040812060010180548392906104d2908490610980565b90915550505f82815260046020526040808220805460ff19166001179055516001600160a01b0385169083908381818185875af1925050503d805f8114610534576040519150601f19603f3d011682016040523d82523d5f602084013e610539565b606091505b505090508061057c5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b604482015260640161023f565b836001600160a01b0316856001600160a01b0316847fa45d92b7c2db38b7d282b251dfc4c97c20239bce7dc5c483e3b6a23e44a85538856040516105c291815260200190565b60405180910390a45050505050565b5f546001600160a01b031633146105fa5760405162461bcd60e51b815260040161023f90610944565b5f5b81518110156106dd5760035f83838151811061061a5761061a610999565b6020908102919091018101516001600160a01b031682528101919091526040015f205460ff161561068d5760405162461bcd60e51b815260206004820152601960248201527f526563697069656e7420616c7265616479206578697374732100000000000000604482015260640161023f565b600160035f8484815181106106a4576106a4610999565b6020908102919091018101516001600160a01b031682528101919091526040015f20805460ff19169115159190911790556001016105fc565b5050565b335f9081526002602052604090205460ff166107315760405162461bcd60e51b815260206004820152600f60248201526e55736572206e6f7420666f756e642160881b604482015260640161023f565b6001543410156107795760405162461bcd60e51b8152602060048201526013602482015272496e73756666696369656e742066756e64732160681b604482015260640161023f565b335f908152600260205260408120600101805434929061079a9084906109ad565b9091555050604080513381523460208201527f8f193f79d8ed81180dd76e90fc0c99ea46d7ebebba5666a525e272fba4a134c591016102f0565b80356001600160a01b03811681146107ea575f5ffd5b919050565b5f5f5f5f60808587031215610802575f5ffd5b61080b856107d4565b9350610819602086016107d4565b93969395505050506040820135916060013590565b634e487b7160e01b5f52604160045260245ffd5b5f60208284031215610852575f5ffd5b813567ffffffffffffffff811115610868575f5ffd5b8201601f81018413610878575f5ffd5b803567ffffffffffffffff8111156108925761089261082e565b8060051b604051601f19603f830116810181811067ffffffffffffffff821117156108bf576108bf61082e565b6040529182526020818401810192908101878411156108dc575f5ffd5b6020850194505b83851015610902576108f4856107d4565b8152602094850194016108e3565b509695505050505050565b5f6020828403121561091d575f5ffd5b5035919050565b5f60208284031215610934575f5ffd5b61093d826107d4565b9392505050565b6020808252600e908201526d4163636573732044656e6965642160901b604082015260600190565b634e487b7160e01b5f52601160045260245ffd5b818103818111156109935761099361096c565b92915050565b634e487b7160e01b5f52603260045260245ffd5b808201808211156109935761099361096c56fea2646970667358221220502e4f7d4f5cb6fef0b57dca8a6db45a4f006feb2ff2c28d38f9b7bdb5ef952a64736f6c634300081c0033")]
    contract AuthorityContract {
        address public owner;
        uint256 public minDepositAmount = 1 ether;

        struct User {
            bool exists;
            uint256 collateralAmount;
        }

        struct Recipient {
            bool exists;
            uint256 withdrawAmount /* Amount withdrawn to merchant in case that payment failed */;
        }

        mapping(address => User) public users;
        mapping(address => Recipient) public recipients;
        mapping(bytes32 => bool) public processedFailedTransactions;

        event UserRegistered(address _from, uint _collateral);
        event UserAddDeposit(address _from, uint _collateral);
        event RecipientRefunded(
            bytes32 indexed transactionHash,
            address indexed sender,
            address indexed recipient,
            uint256 amount
        );

        constructor() {
            owner = msg.sender;
        }

        modifier onlyOwner() {
            require(msg.sender == owner, "Access Denied!");
            _;
        }

        modifier onlyUser() {
            require(users[msg.sender].exists, "User not found!");
            _;
        }

        function registerUser() public payable {
            require(msg.value >= minDepositAmount, "Insufficient funds!");
            require(!users[msg.sender].exists, "User already exists!");
            users[msg.sender].collateralAmount = msg.value;
            users[msg.sender].exists = true;
            emit UserRegistered(msg.sender, msg.value);
        }

        function addDepositUser() public payable onlyUser {
            require(msg.value >= minDepositAmount, "Insufficient funds!");
            users[msg.sender].collateralAmount += msg.value;
            emit UserAddDeposit(msg.sender, msg.value);
        }

        function registerRecipient(
            address[] memory recipientAddresses
        ) public onlyOwner {
            for (uint i = 0; i < recipientAddresses.length; i++) {
                require(
                    !recipients[recipientAddresses[i]].exists,
                    "Recipient already exists!"
                );
                recipients[recipientAddresses[i]].exists = true;
            }
        }

        function remunerateVictim(
            address senderAddress,
            address recipientAddress,
            bytes32 transactionHash,
            uint amount
        ) public {
            require(recipients[msg.sender].exists, "Access Denied!");
            require(
                !processedFailedTransactions[transactionHash],
                "Transaction already processed"
            );
            require(recipientAddress == msg.sender, "Access Denied!");
            require(recipients[recipientAddress].exists, "Access Denied!");
            require(users[senderAddress].exists, "User not found!");
            require(
                users[senderAddress].collateralAmount >= amount,
                "Insufficient collateral!"
            );

            users[senderAddress].collateralAmount -= amount;
            processedFailedTransactions[transactionHash] = true;
            (bool success, ) = payable(recipientAddress).call{value: amount}("");
            require(success, "Transfer failed");
            emit RecipientRefunded(
                transactionHash,
                senderAddress,
                recipientAddress,
                amount
            );
        }
    }

}
