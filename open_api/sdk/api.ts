/* tslint:disable */
/* eslint-disable */
/**
 * 4mica CoreApi JSON-RPC
 * JSON-RPC API for Core module
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CorePublicParameters
 */
export interface CorePublicParameters {
    /**
     * 
     * @type {Array<number>}
     * @memberof CorePublicParameters
     */
    'public_key'?: Array<number>;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface GetTransactionsByHashRequest
 */
export interface GetTransactionsByHashRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof GetTransactionsByHashRequest
     */
    'hashes': Array<string>;
}
/**
 * 
 * @export
 * @interface IssuePaymentCertRequest
 */
export interface IssuePaymentCertRequest {
    /**
     * 
     * @type {string}
     * @memberof IssuePaymentCertRequest
     */
    'user_addr': string;
    /**
     * 
     * @type {string}
     * @memberof IssuePaymentCertRequest
     */
    'recipient_addr': string;
    /**
     * 
     * @type {string}
     * @memberof IssuePaymentCertRequest
     */
    'transaction_id': string;
    /**
     * 
     * @type {number}
     * @memberof IssuePaymentCertRequest
     */
    'amount': number;
}
/**
 * 
 * @export
 * @interface RegisterUserRequest
 */
export interface RegisterUserRequest {
    /**
     * 
     * @type {string}
     * @memberof RegisterUserRequest
     */
    'user_addr': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const TransactionVerificationResult = {
    Verified: 'Verified',
    AlreadyVerified: 'AlreadyVerified',
    NotFound: 'NotFound'
} as const;

export type TransactionVerificationResult = typeof TransactionVerificationResult[keyof typeof TransactionVerificationResult];


/**
 * 
 * @export
 * @interface UserInfo
 */
export interface UserInfo {
    /**
     * 
     * @type {number}
     * @memberof UserInfo
     */
    'deposit'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserInfo
     */
    'available_deposit'?: number;
    /**
     * 
     * @type {Array<UserTransactionInfo>}
     * @memberof UserInfo
     */
    'transactions'?: Array<UserTransactionInfo>;
}
/**
 * 
 * @export
 * @interface UserTransactionInfo
 */
export interface UserTransactionInfo {
    /**
     * 
     * @type {string}
     * @memberof UserTransactionInfo
     */
    'user_addr'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserTransactionInfo
     */
    'recipient_addr'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserTransactionInfo
     */
    'tx_hash'?: string;
    /**
     * 
     * @type {number}
     * @memberof UserTransactionInfo
     */
    'amount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof UserTransactionInfo
     */
    'verified'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserTransactionInfo
     */
    'finalized'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserTransactionInfo
     */
    'failed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserTransactionInfo
     */
    'cert'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UserTransactionInfo
     */
    'created_at'?: number;
}
/**
 * 
 * @export
 * @interface VerifyTransactionRequest
 */
export interface VerifyTransactionRequest {
    /**
     * 
     * @type {string}
     * @memberof VerifyTransactionRequest
     */
    'tx_hash': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get core public parameters
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicParams: async (body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/core/getPublicParams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get transactions by their hashes
         * @param {GetTransactionsByHashRequest} getTransactionsByHashRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionsByHash: async (getTransactionsByHashRequest: GetTransactionsByHashRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getTransactionsByHashRequest' is not null or undefined
            assertParamExists('getTransactionsByHash', 'getTransactionsByHashRequest', getTransactionsByHashRequest)
            const localVarPath = `/core/getTransactionsByHash`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getTransactionsByHashRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user information
         * @param {RegisterUserRequest} registerUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (registerUserRequest: RegisterUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerUserRequest' is not null or undefined
            assertParamExists('getUser', 'registerUserRequest', registerUserRequest)
            const localVarPath = `/core/getUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Issue payment certificate
         * @param {IssuePaymentCertRequest} issuePaymentCertRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuePaymentCert: async (issuePaymentCertRequest: IssuePaymentCertRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'issuePaymentCertRequest' is not null or undefined
            assertParamExists('issuePaymentCert', 'issuePaymentCertRequest', issuePaymentCertRequest)
            const localVarPath = `/core/issuePaymentCert`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(issuePaymentCertRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register a user
         * @param {RegisterUserRequest} registerUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser: async (registerUserRequest: RegisterUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerUserRequest' is not null or undefined
            assertParamExists('registerUser', 'registerUserRequest', registerUserRequest)
            const localVarPath = `/core/registerUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Verify a transaction
         * @param {VerifyTransactionRequest} verifyTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyTransaction: async (verifyTransactionRequest: VerifyTransactionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifyTransactionRequest' is not null or undefined
            assertParamExists('verifyTransaction', 'verifyTransactionRequest', verifyTransactionRequest)
            const localVarPath = `/core/verifyTransaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyTransactionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get core public parameters
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicParams(body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CorePublicParameters>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublicParams(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getPublicParams']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get transactions by their hashes
         * @param {GetTransactionsByHashRequest} getTransactionsByHashRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransactionsByHash(getTransactionsByHashRequest: GetTransactionsByHashRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserTransactionInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTransactionsByHash(getTransactionsByHashRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getTransactionsByHash']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get user information
         * @param {RegisterUserRequest} registerUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(registerUserRequest: RegisterUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(registerUserRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Issue payment certificate
         * @param {IssuePaymentCertRequest} issuePaymentCertRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async issuePaymentCert(issuePaymentCertRequest: IssuePaymentCertRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.issuePaymentCert(issuePaymentCertRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.issuePaymentCert']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Register a user
         * @param {RegisterUserRequest} registerUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerUser(registerUserRequest: RegisterUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerUser(registerUserRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.registerUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Verify a transaction
         * @param {VerifyTransactionRequest} verifyTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyTransaction(verifyTransactionRequest: VerifyTransactionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionVerificationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyTransaction(verifyTransactionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.verifyTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Get core public parameters
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicParams(body?: object, options?: RawAxiosRequestConfig): AxiosPromise<CorePublicParameters> {
            return localVarFp.getPublicParams(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get transactions by their hashes
         * @param {GetTransactionsByHashRequest} getTransactionsByHashRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionsByHash(getTransactionsByHashRequest: GetTransactionsByHashRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserTransactionInfo>> {
            return localVarFp.getTransactionsByHash(getTransactionsByHashRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user information
         * @param {RegisterUserRequest} registerUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(registerUserRequest: RegisterUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserInfo> {
            return localVarFp.getUser(registerUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Issue payment certificate
         * @param {IssuePaymentCertRequest} issuePaymentCertRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuePaymentCert(issuePaymentCertRequest: IssuePaymentCertRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.issuePaymentCert(issuePaymentCertRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register a user
         * @param {RegisterUserRequest} registerUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser(registerUserRequest: RegisterUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.registerUser(registerUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Verify a transaction
         * @param {VerifyTransactionRequest} verifyTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyTransaction(verifyTransactionRequest: VerifyTransactionRequest, options?: RawAxiosRequestConfig): AxiosPromise<TransactionVerificationResult> {
            return localVarFp.verifyTransaction(verifyTransactionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Get core public parameters
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPublicParams(body?: object, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPublicParams(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get transactions by their hashes
     * @param {GetTransactionsByHashRequest} getTransactionsByHashRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTransactionsByHash(getTransactionsByHashRequest: GetTransactionsByHashRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTransactionsByHash(getTransactionsByHashRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user information
     * @param {RegisterUserRequest} registerUserRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUser(registerUserRequest: RegisterUserRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUser(registerUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Issue payment certificate
     * @param {IssuePaymentCertRequest} issuePaymentCertRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public issuePaymentCert(issuePaymentCertRequest: IssuePaymentCertRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).issuePaymentCert(issuePaymentCertRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register a user
     * @param {RegisterUserRequest} registerUserRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public registerUser(registerUserRequest: RegisterUserRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).registerUser(registerUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Verify a transaction
     * @param {VerifyTransactionRequest} verifyTransactionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public verifyTransaction(verifyTransactionRequest: VerifyTransactionRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).verifyTransaction(verifyTransactionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



