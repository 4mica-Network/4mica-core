import sys
import subprocess
import logging

logging.basicConfig(level=logging.INFO)

def run_subprocess(script, *args):
    try:
        result = subprocess.run(["node", script, *args], check=True, capture_output=True, text=True)
        logging.info(f"Operation successful: {result.stdout}")
    except subprocess.CalledProcessError as e:
        logging.error(f"Operation failed: {e.stderr}")
    except Exception as e:
        logging.error(f"An unexpected error occurred: {str(e)}")

def user_register(address, amount):
    run_subprocess("../js/registerUser.js", address, amount)

def user_deposit(address, amount):
    run_subprocess("../js/addDepositUser.js", address, amount)

def user_pay(sender, receiver, amount):
    run_subprocess("../js/payUser.js", sender, receiver, amount)

def user_list(address):
    run_subprocess("../js/listUsers.js", address)

def user_prove(txHash):
    run_subprocess("../js/proveUser.js", txHash)

def recipient_register(address):
    run_subprocess("../js/registerRecipient.js", address)

def recipient_list(address):
    run_subprocess("../js/listRecipients.js", address)

def recipient_verify(txHash):
    run_subprocess("../js/verifyRecipient.js", txHash)

def recipient_remunerate(txHash):
    run_subprocess("../js/remunerateRecipient.js", txHash)

def main():
    if len(sys.argv) < 3:
        print("Usage: 4mica <category> <command> [arguments]")
        sys.exit(1)

    category = sys.argv[1]
    command = sys.argv[2]

    commands = {
        "user": {
            "register": (user_register, 5),
            "deposit": (user_deposit, 5),
            "pay": (user_pay, 6),
            "list": (user_list, 4),
            "prove": (user_prove, 4)
        },
        "recipient": {
            "register": (recipient_register, 4),
            "list": (recipient_list, 4),
            "verify": (recipient_verify, 4),
            "remunerate": (recipient_remunerate, 4)
        }
    }

    if category in commands and command in commands[category]:
        func, expected_args = commands[category][command]
        if len(sys.argv) == expected_args:
            func(*sys.argv[3:expected_args])
        else:
            print(f"Invalid number of arguments for {category} {command}")
            sys.exit(1)
    else:
        print("Invalid category or command")
        sys.exit(1)

if __name__ == "__main__":
    main()
