//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "User")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub address: String,
    #[sea_orm(column_type = "Double")]
    pub revenue: f64,
    pub version: i32,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    #[sea_orm(column_type = "Double")]
    pub collateral: f64,
    #[sea_orm(column_type = "Double")]
    pub locked_collateral: f64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::collateral_event::Entity")]
    CollateralEvent,
    #[sea_orm(has_many = "super::tabs::Entity")]
    Tabs,
    #[sea_orm(has_many = "super::user_transaction::Entity")]
    UserTransaction,
    #[sea_orm(has_many = "super::withdrawal::Entity")]
    Withdrawal,
}

impl Related<super::collateral_event::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CollateralEvent.def()
    }
}

impl Related<super::tabs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tabs.def()
    }
}

impl Related<super::user_transaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserTransaction.def()
    }
}

impl Related<super::withdrawal::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Withdrawal.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
