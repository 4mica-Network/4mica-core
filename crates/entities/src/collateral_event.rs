//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.15

use super::sea_orm_active_enums::CollateralEventType;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "CollateralEvent")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub id: String,
    #[sea_orm(column_type = "Text")]
    pub user_address: String,
    #[sea_orm(column_type = "Text")]
    pub amount: String,
    pub event_type: CollateralEventType,
    #[sea_orm(column_type = "Text", nullable)]
    pub tab_id: Option<String>,
    pub req_id: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub tx_id: Option<String>,
    pub created_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserAddress",
        to = "super::user::Column::Address",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    User,
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
