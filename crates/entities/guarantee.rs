//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "Guarantee")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub tab_id: String,
    #[sea_orm(primary_key, auto_increment = false)]
    pub req_id: i32,
    #[sea_orm(column_type = "Text")]
    pub from_address: String,
    #[sea_orm(column_type = "Text")]
    pub to_address: String,
    #[sea_orm(column_type = "Double")]
    pub value: f64,
    pub start_ts: DateTime,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::tabs::Entity",
        from = "Column::TabId",
        to = "super::tabs::Column::Id",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    Tabs,
}

impl Related<super::tabs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tabs.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
